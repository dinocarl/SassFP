@charset "UTF-8";
/* # Module: prefixStr */
/* ------------------- */
/* Test: Prefixes a string with first argument */
/*   ✔ [assert-equal] Prefixes a string with first argument */
/*  */
/*  */
/* # Module: suffixStr */
/* ------------------- */
/* Test: Suffixes a string with first argument */
/*   ✔ [assert-equal] Suffixes a string with first argument */
/*  */
/*  */
/* # Module: explode */
/* ----------------- */
/* Test: Applies a function to a list to determine whether a given member gets included */
/*   ✔ [assert-equal] Applies a function to a list to determine whether a given member gets included */
/*  */
/*  */
/* # Module: implode */
/* ----------------- */
/* Test: Returns a string where all the members of $list have been concatenated together with $glue between them. */
/*   ✔ [assert-equal] Returns a string where all the members of $list have been concatenated together with $glue between them. */
/*  */
/*  */
/* # Module: repeat */
/* ---------------- */
/* Test: Returns a list where $item is represented $times times */
/*   ✔ [assert-equal] Returns a list where $item is represented $times times */
/*  */
/*  */
/* # Module: slice */
/* --------------- */
/* Test: Returns **`$list`**'s members beginning at position **`$start`** and ending at **`$end`**. */
/*   ✔ [assert-equal] Returns **`$list`**'s members beginning at position **`$start`** and ending at **`$end`**. */
/*  */
/*  */
/* # Module: head */
/* -------------- */
/* Test: Returns the first member of $strlist. */
/*   ✔ [assert-equal] Returns the first member of $strlist. */
/*  */
/*  */
/* # Module: tail */
/* -------------- */
/* Test: Returns all but the first member of $strlist. */
/*   ✔ [assert-equal] Returns all but the first member of $strlist. */
/*  */
/*  */
/* # Module: init */
/* -------------- */
/* Test: Returns all but the last member of $strlist. */
/*   ✔ [assert-equal] Returns all but the last member of $strlist. */
/*  */
/*  */
/* # Module: last */
/* -------------- */
/* Test: Returns the last member of $strlist. */
/*   ✔ [assert-equal] Returns the last member of $strlist. */
/*  */
/*  */
/* # Module: flatten */
/* ----------------- */
/* Test: Returns a flattened version of $list. */
/*   ✔ [assert-equal] Returns a flattened version of $list. */
/*  */
/*  */
/* # Module: always */
/* ---------------- */
/* Test: Returns the value passed to it. */
/*   ✔ [assert-equal] Returns the value passed to it. */
/*  */
/*  */
/* # Module: filter */
/* ---------------- */
/* Test: Returns a new list where $predicate returns true for members of $list. */
/*   ✔ [assert-equal] Returns a new list where $predicate returns true for members of $list. */
/*  */
/*  */
/* # Module: map */
/* ------------- */
/* Test: Returns a new list where each member of $list has had function $fn run against it. */
/*   ✔ [assert-equal] Returns a new list where each member of $list has had function $fn run against it. */
/*  */
/*  */
/* # Module: reduce */
/* ---------------- */
/* Test: Accumulates the result of running each member of $list through $fn starting with the $initial value and $list's first member. */
/*   ✔ [assert-equal] Accumulates the result of running each member of $list through $fn starting with the $initial value and $list's first member. */
/*  */
/*  */
/* # Module: pipe */
/* -------------- */
/* Test: Accepts a list of function names and initial data, outputs the result of each of the functions being run on the successive results from first to last. */
/*   ✔ [assert-equal] Accepts a list of function names and initial data, outputs the result of each of the functions being run on the successive results from first to last. */
/*  */
/*  */
/* # Module: compose */
/* ----------------- */
/* Test: Accepts a list of function names and initial data, outputs the result of each of the functions being run on the successive results from last to first. */
/*   ✔ [assert-equal] Accepts a list of function names and initial data, outputs the result of each of the functions being run on the successive results from last to first. */
/*  */
/*  */
/* # Module: prop */
/* -------------- */
/* Test: Allows for getting at nested attributes in a Sass map. Uses dot syntax to get at nested attributes. Ensures a null return for any unrecognized paths. */
/*   ✔ [assert-equal] Allows for getting at nested attributes in a Sass map. Uses dot syntax to get at nested attributes. Ensures a null return for any unrecognized paths. */
/*  */
/*  */
/* # Module: propOr */
/* ---------------- */
/* Test: Returns the value of a `prop` lookup when successful, and returns a provided fallback when not. */
/*   ✔ [assert-equal] Returns the value of a `prop` lookup when successful, and returns a provided fallback when not. */
/*  */
/*  */
/* # Module: add */
/* ------------- */
/* Test: Adds $y to $x. */
/*   ✔ [assert-equal] Adds $y to $x. */
/*  */
/*  */
/* # Module: multiply */
/* ------------------ */
/* Test: Multiplies $x by $y. */
/*   ✔ [assert-equal] Multiplies $x by $y. */
/*  */
/*  */
/* # Module: subtract */
/* ------------------ */
/* Test: Subtracts $y from $x. */
/*   ✔ [assert-equal] Subtracts $y from $x. */
/*  */
/*  */
/* # Module: divide */
/* ---------------- */
/* Test: Divides $x by $y. */
/*   ✔ [assert-equal] Divides $x by $y. */
/*  */
/*  */
/* # Module: percent */
/* ----------------- */
/* Test: Returns $x's percent of $y. */
/*   ✔ [assert-equal] Returns $x's percent of $y. */
/*  */
/*  */
/* # Module: double */
/* ---------------- */
/* Test: Doubles $x. */
/*   ✔ [assert-equal] Doubles $x. */
/*  */
/*  */
/* # Module: square */
/* ---------------- */
/* Test: Squares $x. */
/*   ✔ [assert-equal] Squares $x. */
/*  */
/*  */
/* # Module: inc */
/* ------------- */
/* Test: Increments $x. */
/*   ✔ [assert-equal] Increments $x. */
/*  */
/*  */
/* # Module: dec */
/* ------------- */
/* Test: Decrements $x. */
/*   ✔ [assert-equal] Decrements $x. */
/*  */
/*  */
/* # Module: sum */
/* ------------- */
/* Test: Accepts a list of numbers and returns the sum of them. */
/*   ✔ [assert-equal] Accepts a list of numbers and returns the sum of them. */
/*  */
/*  */
/* # Module: power */
/* --------------- */
/* Test: Returns the total after multiplying $num $exponent times. */
/*   ✔ [assert-equal] Returns the total after multiplying $num $exponent times. */
/*  */
/*  */
/* # Module: to-decimal-places */
/* --------------------------- */
/* Test: Returns $num to $digits number of significant digits dropping anything beyond it. */
/*   ✔ [assert-equal] Returns $num to $digits number of significant digits dropping anything beyond it. */
/*  */
/*  */
/* # Module: to-decimal-places with alternative implementation */
/* ----------------------------------------------------------- */
/* Test: Returns the equivalent output of to-decimal-places using an alternative implemetation */
/*   ✔ [assert-equal] Returns the equivalent output of to-decimal-places using an alternative implemetation */
/*  */
/*  */
/* # Module: applyUnit */
/* ------------------- */
/* Test: Appends $unit to $val */
/*   ✔ [assert-equal] Appends $unit to $val */
/*  */
/*  */
/* # Module: px */
/* ------------ */
/* Test: Shortcut function to apply px unit */
/*   ✔ [assert-equal] Shortcut function to apply px unit */
/*  */
/*  */
/* # Module: em */
/* ------------ */
/* Test: Shortcut function to apply em unit */
/*   ✔ [assert-equal] Shortcut function to apply em unit */
/*  */
/*  */
/* # Module: vw */
/* ------------ */
/* Test: Shortcut function to apply vw unit */
/*   ✔ [assert-equal] Shortcut function to apply vw unit */
/*  */
/*  */
/* # Module: vh */
/* ------------ */
/* Test: Shortcut function to apply vh unit */
/*   ✔ [assert-equal] Shortcut function to apply vh unit */
/*  */
/*  */
/* # Module: rem */
/* ------------- */
/* Test: Shortcut function to apply rem unit */
/*   ✔ [assert-equal] Shortcut function to apply rem unit */
/*  */
/*  */
/* # Module: applyUnit and shortcuts */
/* --------------------------------- */
/* Test: Shortcut unit functions should create the same output as the longform */
/*   ✔ [assert-equal] Shortcut unit functions should create the same output as the longform */
/*  */
/*  */
/* # Module: fpAppend */
/* ------------------ */
/* Test: Is same as native Sass function, append, with argument order converted */
/*   ✔ [assert-equal] Is same as native Sass function, append, with argument order converted */
/*  */
/*  */
/* # Module: fpJoin */
/* ---------------- */
/* Test: Is same as native Sass function, join, with argument order converted */
/*   ✔ [assert-equal] Is same as native Sass function, join, with argument order converted */
/*  */
/*  */
/* # Module: fpNth */
/* --------------- */
/* Test: Is same as native Sass function, nth, with argument order converted */
/*   ✔ [assert-equal] Is same as native Sass function, nth, with argument order converted */
/*  */
/*  */
/* # Module: is_list */
/* ----------------- */
/* Test: Returns whether $val is a list. */
/*   ✔ [assert-equal] Returns whether $val is a list. */
/*  */
/*  */
/* # Module: is_color */
/* ------------------ */
/* Test: Returns whether $val is a color. */
/*   ✔ [assert-equal] Returns whether $val is a color. */
/*  */
/*  */
/* # Module: is_string */
/* ------------------- */
/* Test: Returns whether $val is a string. */
/*   ✔ [assert-equal] Returns whether $val is a string. */
/*  */
/*  */
/* # Module: is_boolean */
/* -------------------- */
/* Test: Returns whether $val is a boolean. */
/*   ✔ [assert-equal] Returns whether $val is a boolean. */
/*  */
/*  */
/* # Module: is_number */
/* ------------------- */
/* Test: Returns whether $val is a number. */
/*   ✔ [assert-equal] Returns whether $val is a number. */
/*  */
/*  */
/* # Module: is_null */
/* ----------------- */
/* Test: Returns whether $val is a null. */
/*   ✔ [assert-equal] Returns whether $val is a null. */
/*  */
/*  */
/* # Module: is_map */
/* ---------------- */
/* Test: Returns whether $val is a map. */
/*   ✔ [assert-equal] Returns whether $val is a map. */
/*  */
/*  */
/* # SUMMARY ---------- */
/* 49 Tests: */
/* - 49 Passed */
/* - 0 Failed */
/* Stats: */
/* - 49 Modules */
/* - 49 Tests */
/* - 49 Assertions */
/* -------------------- */
