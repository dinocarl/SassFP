// Specs for Type functions

@import '../src/type';

$type-spec: (
  (
    'is_list',
    'Returns whether $val is a list.',
    is_list((#fff, red, #222, #333)) is_list(#fff red #222 #333) is_list(#fff),
    true true false
  ),
  (
    'is_color',
    'Returns whether $val is a color.',
    is_color(red) is_color('red'),
    true false
  ),
  (
    'is_string',
    'Returns whether $val is a string.',
    is_string('val') is_string(false),
    true false
  ),
  (
    'is_boolean',
    'Returns whether $val is a boolean.',
    is_boolean(true) is_boolean('val'),
    true false
  ),
  (
    'is_number',
    'Returns whether $val is a number.',
    is_number(10) is_number('10'),
    true false
  ),
  (
    'is_null',
    'Returns whether $val is a null.',
    is_null(null) is_null(true),
    true false
  ),
  (
    'is_map',
    'Returns whether $val is a map.',
    is_map((header: red)) is_map((header red)),
    true false
  ),
  (
    'isnt_list',
    'Returns whether $val is not a list.',
    isnt_list((#fff, red, #222, #333)) isnt_list(#fff red #222 #333) isnt_list(#fff),
    false false true
  ),
  (
    'isnt_color',
    'Returns whether $val is not a color.',
    isnt_color(red) isnt_color('red'),
    false true
  ),
  (
    'isnt_string',
    'Returns whether $val is not a string.',
    isnt_string('val') isnt_string(false),
    false true
  ),
  (
    'isnt_boolean',
    'Returns whether $val is not a boolean.',
    isnt_boolean(true) isnt_boolean('val'),
    false true
  ),
  (
    'isnt_number',
    'Returns whether $val is not a number.',
    isnt_number(10) isnt_number('10'),
    false true
  ),
  (
    'isnt_null',
    'Returns whether $val is not a null.',
    isnt_null(null) isnt_null(true),
    false true
  ),
  (
    'isnt_map',
    'Returns whether $val is not a map.',
    isnt_map((header: red)) isnt_map((header red)),
    false true
  ),
  (
    'equals',
    'Returns whether the 2 provided arguments are equivalent.',
    (
      equals(1, 1)
      equals(1, '1')
      equals((header: red), (header: red))
      equals((header red), (header red))
    ),
    true false true true
  ),
  (
    'eq',
    'Returns whether the 2 provided arguments are equivalent (alias of equals).',
    eq(1, 1) eq('1','1') eq(999999, 999999) eq('999999','999999') eq(1, 2) eq('1', '2'),
    true true true true false false
  ),
  (
    'lt',
    'Returns whether the first argument is less than the second.',
    lt(1, 10) lt(10, 1) lt(999999, 999999) lt(999999, 9999999) lt(1, 2),
    true false false true true
  ),
  (
    'lte',
    'Returns whether the first argument is less than or equal to the second.',
    lte(1, 11) lte(10, 1) lte(999999, 999999) lte(999999, 9999999) lte(1, 2),
    true false true true true
  ),
  (
    'gt',
    'Returns whether the first argument is greater than the second.',
    gt(1, 10) gt(10, 1) gt(999999, 999999) gt(999999, 9999999) gt(1, 2),
    false true false false false
  ),
  (
    'gte',
    'Returns whether the first argument is greater than or equal to the second.',
    gte(1, 10) gte(10, 1) gte(999999, 999999) gte(999999, 9999999) gte(1, 2),
    false true true false false
  ),
);
