// Specs for String functions

@import '../src/list';

$list-spec: (
  (
    'implode',
    'Returns a string where all the members of $list have been concatenated together with $glue between them.',
    implode('-', ('selector', 'one')),
    'selector-one'
  ),
  (
    'repeat',
    'Returns a list where $item is represented $times times',
    repeat(3, 10),
    10 10 10
  ),
  (
    'slice',
    'Returns $list\'s members beginning at position $start and ending at $end.',
    slice(3, 5, $strlist),
    'charlie' 'dani' 'elliot'
  ),
  (
    'ensureList',
    'Returns a list whether passed a set of arguments or a list.',
    (
      ensureList($strlist)
      ensureList('alex', 'billy', 'charlie', 'dani', 'elliot')
    ),
    $strlist
    ("alex", "billy", "charlie", "dani", "elliot")
  ),
  (
    'head',
    'Returns the first member of $strlist.',
    head($strlist),
    'alex'
  ),
  (
    'tail',
    'Returns all but the first member of $strlist.',
    tail($strlist),
    'billy' 'charlie' 'dani' 'elliot'
  ),
  (
    'init',
    'Returns all but the last member of $strlist.',
    init($strlist),
    'alex' 'billy' 'charlie' 'dani'
  ),
  (
    'last',
    'Returns the last member of $strlist.',
    last($strlist),
    'elliot'
  ),
  (
    'flatten',
    'Returns a flattened version of $list.',
    flatten($clrlist-nested),
    $clrlist-flat
  ),
  (
    'partition',
    'Returns a split version of $list.',
    (
      partition(gt5, (4,5,6,7)),
      partition(gt5, (0,1,2,3)),
      partition(gt5, (6,7,8,9)),
    ),
    ((6 7, 4 5), ((), 0 1 2 3), (6 7 8 9, ()))
  ),
  (
    'contains',
    'Returns a Boolean whether $item is in $list.',
    (
      contains('alex', $strlist)
      contains('allen', $strlist)
      contains('billy', $strlist)
    ),
    true false true
  ),
  (
    'intersection',
    'Returns new list of what both $list1 and $list2 have in common.',
    (
      intersection(('alex' 'billy' 'allen'), $strlist)
      intersection(('alex.a' 'billy' 'allen'), $strlist)
      intersection(('alex.a' 'allen'), $strlist)
    ),
    ('alex' 'billy') ('billy',) ()
  ),
  (
    'difference',
    'Returns new list of what both $list1 and $list2 have in common.',
    (
      difference(('alex' 'billy'), $strlist)
      difference(('alex' 'billy' 'allen'), $strlist)
      difference(('alex.a' 'billy' 'allen'), $strlist)
    ),
    () ('allen',) ('alex.a' 'allen')
  ),
  (
    'integrations',
    'Run itegrations with list methods',
    (
      compose(
        head,
        (explode, '.'),
        ('x.y.z')
      )
      compose(
        (implode, '.'),
        tail,
        (explode, '.'),
        ('x.y.z')
      )
      compose(
        (implode, '.'),
        init,
        (explode, '.'),
        ('x.y.z')
      )
      compose(
        (implode, '.'),
        last,
        (explode, '.'),
        ('x.y.z')
      )
    ),
    'x' 'y.z' 'x.y' 'z'
  )
);
