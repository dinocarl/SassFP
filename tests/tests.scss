@import "../node_modules/sass-true/sass/true";
@import '../SassFP';

@function darkenbyten($color) {
  @return darken($color, 10%);
}

@function gt5($val) {
  @return $val > 5;
}

$strlist: 'alex' 'billy' 'charlie' 'dani' 'elliot';
$listfrag1: 'alex' 'billy';
$listfrag2: 'charlie' 'dani';
$clrlist-nested: (#fff, red, (#222, (#333, #444), #555, (#666, #777)));
$clrlist-flat: (#fff red #222 #333 #444 #555 #666 #777);
$clrlist-darkened: (#e6e6e6 #cc0000 #090909 #1a1a1a #2b2b2b #3c3c3c #4d4d4d #5e5e5e);
$clrobj: (header:(one: #333, two: #444), footer: #666);

$suite: (
  (
    'prefixStr',
    'Prefixes a string with first argument',
    prefixStr('selector', 'one'),
    'selectorone'
  ),
  (
    'suffixStr',
    'Suffixes a string with first argument',
    prefixStr('selector', 'one'),
    'selectorone'
  ),
  (
    'explode',
    'Applies a function to a list to determine whether a given member gets included',
    explode('-', 'selector-one'),
    'selector' 'one'
  ),
  (
    'implode',
    'Returns a string where all the members of $list have been concatenated together with $glue between them.',
    implode('-', ('selector', 'one')),
    'selector-one'
  ),
  (
    'repeat-into-list',
    'Returns a list where $item is represented $times times',
    repeat-into-list(3, 10),
    10 10 10
  ),
  (
    'slice',
    'Returns **`$list`**\'s members beginning at position **`$start`** and ending at **`$end`**.',
    slice(3, 5, $strlist),
    'charlie' 'dani' 'elliot'
  ),
  (
    'head',
    'Returns the first member of $strlist.',
    head($strlist),
    'alex'
  ),
  (
    'tail',
    'Returns all but the first member of $strlist.',
    tail($strlist),
    'billy' 'charlie' 'dani' 'elliot'
  ),
  (
    'init',
    'Returns all but the last member of $strlist.',
    init($strlist),
    'alex' 'billy' 'charlie' 'dani'
  ),
  (
    'last',
    'Returns the last member of $strlist.',
    last($strlist),
    'elliot'
  ),
  (
    'flatten',
    'Returns a flattened version of $list.',
    flatten($clrlist-nested),
    $clrlist-flat
  ),
  (
    'always',
    'Returns the value passed to it.',
    (
      always(1),
      always('asdf'),
      always(('x', 'y', 'z')),
      always(true),
      always(false)
    ),
    (1, 'asdf', ('x', 'y', 'z'), true, false)
  ),
  (
    'filter',
    'Returns a new list where $predicate returns true for members of $list.',
    filter(gt5, (4,5,6,7)),
    null null 6 7
  ),
  (
    'map',
    'Returns a new list where each member of $list has had function $fn run against it.',
    map(darkenbyten, $clrlist-flat),
    $clrlist-darkened
  ),
  (
    'reduce',
    'Accumulates the result of running each member of $list through $fn starting with the $initial value and $list\'s first member.',
    (
      reduce(prefixStr, '.', ('alex', 'billy', 'charlie'))
      reduce(suffixStr, '', ('alex', 'billy', 'charlie'))
      reduce(add, 0, (4,5,6))
    ),
    ".alexbillycharlie" "charliebillyalex" 15
  ),
  (
    'pipe',
    'Accepts a list of function names and initial data, outputs the result of each of the functions being run on the successive results from first to last.',
    (
      pipe(
        flatten,
        (map, darkenbyten),
        $clrlist-nested
      )
      pipe(
        (join, ('d', 'e')),
        (implode, '-'),
        (prefixStr, 'x'),
        unquote,
        ('a', 'b', 'c')
      )
      pipe(
        (map, square),
        (reduce, add, 0),
        double,
        (4,5,6)
      )
    ),
    $clrlist-darkened xd-e-a-b-c 154
  ),
  (
    'compose',
    'Accepts a list of function names and initial data, outputs the result of each of the functions being run on the successive results from last to first.',
    (
      compose(
        (map, darkenbyten),
        flatten,
        $clrlist-nested
      )
      compose(
        unquote,
        (prefixStr, 'x'),
        (implode, '-'),
        (join, ('d', 'e')),
        ('a', 'b', 'c')
      )
      compose(
        double,
        (reduce, add, 0),
        (map, square),
        (4, 5, 6)
      )
    ),
    $clrlist-darkened xd-e-a-b-c 154
  ),
  (
    'prop',
    'Allows for getting at nested attributes in a Sass map. Uses dot syntax to get at nested attributes. Ensures a null return for any unrecognized paths.',
    (
      prop('header.two', $clrobj)
      prop('footer', $clrobj)
      prop('body', $clrobj)
      prop('header.two.three.four', $clrobj)
    ),
    #444 #666 null null
  ),
  (
    'propOr',
    'Returns the value of a `prop` lookup when successful, and returns a provided fallback when not.',
    (
      propOr(':(', 'header.two', $clrobj)
      propOr(':(', 'footer', $clrobj)
      propOr(':(', 'body', $clrobj)
      propOr(':(', 'header.two.three.four', $clrobj)
    ),
    #444 #666 ":(" ":("
  ),
  (
    'add',
    'Adds $y to $x.',
    add(12, 2),
    14
  ),
  (
    'multiply',
    'Multiplies $x by $y.',
    multiply(12, 2),
    24
  ),
  (
    'subtract',
    'Subtracts $y from $x.',
    subtract(12, 2),
    10
  ),
  (
    'divide',
    'Divides $x by $y.',
    divide(12, 2),
    6
  ),
  (
    'percent',
    'Returns $x\'s percent of $y.',
    percent(6, 12),
    50%
  ),
  (
    'double',
    'Doubles $x.',
    double(10),
    20
  ),
  (
    'square',
    'Squares $x.',
    square(10),
    100
  ),
  (
    'inc',
    'Increments $x.',
    inc(10),
    11
  ),
  (
    'dec',
    'Decrements $x.',
    dec(10),
    9
  ),
  (
    'sum',
    'Accepts a list of numbers and returns the sum of them.',
    sum(10, 5, 2),
    17
  ),
  (
    'power',
    'Returns the total after multiplying $num $exponent times.',
    power(2, 10) power(10, 2),
    100 1024
  ),
  (
    'to-decimal-places',
    'Returns $num to $digits number of significant digits dropping anything beyond it.',
    to-decimal-places(2, 10.129),
    10.12
  ),
  (
    'to-decimal-places with alternative implementation',
    'Returns the equivalent output of to-decimal-places using an alternative implemetation',
    to-decimal-places(1, 33.33333),
    floor(33.33333 * power(1, 10)) / power(1, 10)
  ),
  (
    'applyUnit',
    'Appends $unit to $val',
    applyUnit(px, 50) applyUnit(em, 50),
    50px 50em
  ),
  (
    'px',
    'Shortcut function to apply px unit',
    px(50),
    50px
  ),
  (
    'em',
    'Shortcut function to apply em unit',
    em(50),
    50em
  ),
  (
    'vw',
    'Shortcut function to apply vw unit',
    vw(50),
    50vw
  ),
  (
    'vh',
    'Shortcut function to apply vh unit',
    vh(50),
    50vh
  ),
  (
    'rem',
    'Shortcut function to apply rem unit',
    rem(50),
    50rem
  ),
  (
    'applyUnit and shortcuts',
    'Shortcut unit functions should create the same output as the longform',
    applyUnit(px, 50) applyUnit(em, 50) applyUnit(vw, 50) applyUnit(vh, 50) applyUnit(rem, 50),
    px(50) em(50) vw(50) vh(50) rem(50)
  ),
  (
    'fpAppend',
    'Is same as native Sass function, append, with argument order converted',
    fpAppend('frankie', $strlist),
    append($strlist, 'frankie')
  ),
  (
    'fpJoin',
    'Is same as native Sass function, join, with argument order converted',
    fpJoin($listfrag2, $listfrag1),
    join($listfrag1, $listfrag2)
  ),
  (
    'fpNth',
    'Is same as native Sass function, nth, with argument order converted',
    fpNth(1, $strlist),
    nth($strlist, 1)
  ),
  (
    'is_list',
    'Returns whether $val is a list.',
    is_list((#fff, red, #222, #333)) is_list(#fff red #222 #333) is_list(#fff),
    true true false
  ),
  (
    'is_color',
    'Returns whether $val is a color.',
    is_color(red) is_color('red'),
    true false
  ),
  (
    'is_string',
    'Returns whether $val is a string.',
    is_string('val') is_string(false),
    true false
  ),
  (
    'is_boolean',
    'Returns whether $val is a boolean.',
    is_boolean(true) is_boolean('val'),
    true false
  ),
  (
    'is_number',
    'Returns whether $val is a number.',
    is_number(10) is_number('10'),
    true false
  ),
  (
    'is_null',
    'Returns whether $val is a null.',
    is_null(null) is_null(true),
    true false
  ),
  (
    'is_map',
    'Returns whether $val is a map.',
    is_map((header: red)) is_map((header red)),
    true false
  )
);

@each $test in $suite {
  @include describe(nth($test, 1)) {
    @include it(nth($test, 2)) {
      @include assert-equal(
        nth($test, 3),
        nth($test, 4),
        $inspect: true
      );
    }
  }
}

@include report;
