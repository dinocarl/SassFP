// Specs for Functional functions

@import '../src/functional';
@import '../src/string';
@import '../src/math';
@import 'data';

$functional-spec: (
  (
    'T',
    'Returns true.',
    (
      T(1),
      T('asdf'),
      T('x', 'y', 'z', 2),
      T(true),
      T(false),
      T()
    ),
    (true, true, true, true, true, true)
  ),
  (
    'F',
    'Returns false.',
    (
      F(1, 2),
      F('asdf', 2),
      F('x', 'y', 'z', 2),
      F(true),
      F(false),
      F()
    ),
    (false, false, false, false, false, false)
  ),
  (
    'always',
    'Returns the value passed to it.',
    (
      always(1),
      always('asdf'),
      always(('x', 'y', 'z')),
      always(true),
      always(false),
      always(F()),
    ),
    (1, 'asdf', ('x', 'y', 'z'), true, false, false)
  ),
  (
    'always',
    'Returns the first value passed to it when passed 2 arguments.',
    (
      always(1, 2),
      always('asdf', 2),
      always(('x', 'y', 'z'), 2),
      always(true, 2),
      always(false, 2)
    ),
    (1, 'asdf', ('x', 'y', 'z'), true, false)
  ),
  (
    'identity',
    'Returns the same value passed to it.',
    (
      identity(1),
      identity('asdf'),
      identity(('x', 'y', 'z')),
      identity(true),
      identity(false)
    ),
    (1, 'asdf', ('x', 'y', 'z'), true, false)
  ),
  (
    'filter',
    'Returns a new list where $predicate returns true for members of $list.',
    (
      filter(gt5, (0,1,2,3))
      filter(gt5, (4,5,6,7))
      filter(gt5, (8,9,10))
    ),
    ()
    (6 7)
    (8 9 10)
  ),
  (
    'reject',
    'Returns a new list where $predicate returns false for members of $list.',
    (
      reject(gt5, (0,1,2,3))
      reject(gt5, (4,5,6,7))
      reject(gt5, (8,9,10))
    ),
    (0 1 2 3)
    (4 5)
    ()
  ),
  (
    'map',
    'Returns a new list where each member of $list has had function $fn run against it.',
    map(darkenbyten, $clrlist-flat),
    map((darkenby, 10%), $clrlist-flat),
    map((darkenby 10%), $clrlist-flat),
    $clrlist-darkened $clrlist-darkened $clrlist-darkened
  ),
  (
    'map-with-index',
    'Returns a new list where each member of $list has had function $fn run against it and its index as two arguments.',
    (
      map-with-index(prefixStr, $strlist)
      map-with-index(add, (4,5,6))
    ),
    ("alex1" "billy2" "charlie3" "dani4" "elliot5")
    (5 7 9)
  ),
  (
    'reduce',
    'Accumulates the result of running each member of $list through $fn starting with the $initial value and $list\'s first member.',
    (
      reduce(prefixStr, '.', ('alex', 'billy', 'charlie'))
      reduce(suffixStr, '', ('alex', 'billy', 'charlie'))
      reduce(add, 0, (4,5,6))
      reduce((sum, 1, 2), 0, (4,5,6))
      reduce((sum 1 2), 0, (4,5,6))
    ),
    ".alexbillycharlie" "charliebillyalex" 15 24 24
  ),
  (
    'pipe',
    'Accepts a list of function names and initial data, outputs the result of each of the functions being run on the successive results from first to last.',
    (
      pipe(
        flatten,
        (map, darkenbyten),
        $clrlist-nested
      )
      pipe(
        (join, ('d', 'e')),
        (implode, '-'),
        (prefixStr, 'x'),
        unquote,
        ('a', 'b', 'c')
      )
      pipe(
        (map, square),
        (reduce, add, 0),
        double,
        (4,5,6)
      )
    ),
    $clrlist-darkened xd-e-a-b-c 154
  ),
  (
    'compose',
    'Accepts a list of function names and initial data, outputs the result of each of the functions being run on the successive results from last to first.',
    (
      compose(
        (map, darkenbyten),
        flatten,
        $clrlist-nested
      )
      compose(
        unquote,
        (prefixStr, 'x'),
        (implode, '-'),
        (join, ('d', 'e')),
        ('a', 'b', 'c')
      )
      compose(
        double,
        (reduce, add, 0),
        (map, square),
        (4, 5, 6)
      )
    ),
    $clrlist-darkened xd-e-a-b-c 154
  )
);
