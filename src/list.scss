// List Functions

@import 'converted';

// converts a string to a list by splitting on a passed string
// explode('-', 'selector-one'); => ('selector', 'one')
@function explode($separator, $str) {
  $result: ();
  $sep-length: str-length($separator);
  $index: str-index($str, $separator);
  @while $index != null {
    $item: str-slice($str, 1, $index - 1);
    $result: append($result, $item);
    $str: str-slice($str, $index + $sep-length);
    $index: str-index($str, $separator);
  }
  $result: append($result, $str);
  @return $result;
}

@function repeat($times, $item) {
  $result: ();
  @for $i from 1 through $times {
    $result: append($result, $item);
  }
  @return $result;
};

// returns a part of a list from a start value to an end
@function slice($start, $end, $list) {
  $accumulated: ();
  @for $i from $start through $end {
    $accumulated: append($accumulated, nth($list, $i));
  }
  @return $accumulated;
}

// ensures that a list gets handed back from rest parameters
@function ensureList($args...) {
  @return if(
    // an arglist is identifable by having type arglist and length 1
    type-of($args) == arglist and length($args) == 1,
    reduce(append, (), nth($args, 1)),
    $args
  );
}

// returns the first member of a list
@function head($list...) {
  $passed-list: ensureList($list...);
  @return nth($passed-list, 1);
}

// returns all but the first member of a list
@function tail($list...) {
  $passed-list: ensureList($list...);
  @return slice(2, length($passed-list), $passed-list);
}

// returns all but the last member of a list
@function init($list...) {
  $passed-list: ensureList($list...);
  @return slice(1, length($passed-list) - 1, $passed-list);
}

// returns the last member of a list
@function last($list...) {
  $passed-list: ensureList($list...);
  @return nth($passed-list, length($passed-list));
}

// flattens a list
@function flatten($list...) {
  $passed-list: ensureList($list...);
  $result: ();
  @each $item in $passed-list {
    @if is_list($item) {
      $flatten: flatten($item);
      @each $i in $flatten {
        $result: append($result, $i);
      }
    }
    @else {
      $result: append($result, $item);
    }
  }
  @return $result;
}

// returns a 2 member list where $list is split along
// whether its members evaluate $predicate as true
@function partition($predicateFn, $list...) {
  $rest: if(length($list) > 1, tail($list), ());
  $true-list: ();
  $false-list: ();
  @each $item in head($list) {
    @if call(safe-call($predicateFn), join($item, $rest)...) {
      $true-list: fpAppend($item, $true-list);
    } @else {
      $false-list: fpAppend($item, $false-list);
    }
  }
  @return ($true-list, $false-list);
}

// returns whether $item is in $list
@function contains($item, $list) {
  @return isnt_null(index($list, $item));
}

// returns new list of what both $list1 and $list2 have in common
@function intersection($list1, $list2) {
  @return head(partition(contains, $list1, $list2));
}
// returns new list of what $list1 and $list2 do not have in common
@function difference($list1, $list2) {
  @return last(partition(contains, $list1, $list2));
}
