// String Functions

@import 'type';

@function prefixStr($prefix, $str){
  @return '#{$prefix}#{$str}';
}

@function suffixStr($suffix, $str){
  @return '#{$str}#{$suffix}';
}

// converts a list to a string with a passed string
// implode('-', ('selector', 'one')); => 'selector-one'
@function implode($glue: '', $list: ()) {
  $result: null;
  @for $i from 1 through length($list) {
    $appendor: if($i != length($list), $glue, '');
    $item: suffixStr($appendor, nth($list, $i));
    $result: suffixStr($item, $result);
  }
  @return $result;
}

// converts a dot-delimited string and any value into
// a Sass map with that same object heirarchy
// pathToMap('x', 10px); => (x: 10px)
// pathToMap('x.y', 10px); => (x: (y: 10px))
// pathToMap('x.y.z', 10px); => (x: (y: (z: 10px)))
@function pathToMap($path, $val) {
  $fst-item: $path;
  $snd-item: '';
  $index: str-index($path, '.');
  // recurse the function
  @if isnt_null($index) {
    $fst-item: str-slice($path, 1, $index - 1);
    $snd-item: str-slice($path, $index + 1, str-length($path));
    @return (#{$fst-item}: pathToMap($snd-item, $val));
  }
  //  base case
  @else {
    @return (#{$path}: $val);
  }
}
