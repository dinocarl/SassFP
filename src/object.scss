// Object Functions

@import 'type';
@import 'list';
@import 'string';

// allows for getting at nested attributes in a Sass map
// ensures a null return for any unrecognized paths
// $colors: (header:(one: #333, two: #444), footer: #666);
// prop('header.two', $colors); => #444
// prop('footer', $colors); => #666
// prop('body', $colors); => null
@function prop($path, $map) {
  $keys: explode('.', $path);
  @each $key in $keys {
    @if isnt_map($map) {
      $map: (_mt_: null);
    }
    $map: map-get($map, $key);
  }
  @return $map;
}

@function propOr($fallback, $path, $map) {
  $propLookUp: prop($path, $map);
  @return if(is_null($propLookUp), $fallback, $propLookUp);
}

// allows for merging deeply nested maps
@function assign($parent-map, $child-map) {
  $result: $parent-map;
  @each $key, $value in $child-map {
    @if (not map-has-key($result, $key)) or (type-of(prop($key, $result)) != type-of($value)) or (not (is_map(prop($key, $result)) and is_map($value))) {
      $result: map-merge($result, ($key: $value));
    }
    @else {
      $result: map-merge($result, ($key: assign(prop($key, $result), $value)));
    }
  }
  @return $result;
}
