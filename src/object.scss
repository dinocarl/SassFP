// Object Functions

@import 'type';
@import 'list';
@import 'string';
@import 'functional';

// allows for getting at nested attributes in a Sass map
// ensures a null return for any unrecognized paths
// $colors: (header:(one: #333, two: #444), footer: #666);
// prop('header.two', $colors); => #444
// prop('footer', $colors); => #666
// prop('body', $colors); => null
@function prop($path, $map) {
  $keys: explode('.', $path);
  @each $key in $keys {
    @if isnt_map($map) {
      $map: (_mt_: null);
    }
    $map: map-get($map, $key);
  }
  @return $map;
}

@function propOr($fallback, $path, $map) {
  $propLookUp: prop($path, $map);
  @return if(is_null($propLookUp), $fallback, $propLookUp);
}

// allows for merging deeply nested maps
@function assign($parent-map, $child-map) {
  $result: $parent-map;
  @each $key, $value in $child-map {
    @if (
      is_null(prop($key, $result))
    ) or (
      type-of(prop($key, $result)) != type-of($value)
    ) or (
      not (is_map(prop($key, $result)) and is_map($value))
    ) {
      $result: map-merge($result, ($key: $value));
    }
    @else {
      $result: map-merge($result, ($key: assign(prop($key, $result), $value)));
    }
  }
  @return $result;
}

// creates new map object from list of keys and a given map object
@function pick($key-list, $obj) {
  $accumulated: ();
  @each $key in $key-list {
    $accumulated: compose(
      (assign, $accumulated),
      (pathToMap, $key),
      (prop, $key),
      $obj
    );
  }
  @return $accumulated;
}

// creates a dot-delimited list of all the paths of a given map object
@function listPaths($obj, $prefixWith: '') {
  $paths: map-keys($obj);
  $output: ();
  @each $path in $paths {
    $currentVal: prop($path, $obj);
    // base case
    $output: fpAppend(prefixStr($prefixWith, $path), $output);
    // recur
    @if is_map($currentVal) {
      $backtrace: '#{$prefixWith}#{$path}.';
      $output: join($output, listPaths($currentVal, $backtrace));
    }
  }
  @return $output;
}

// creates new map object from the provided one, then removing a specified list of keys
@function omit($key-list, $obj) {
  // omit compares the paths in $key-list to
  // the ones from all the ones available of the object
  // then uses the difference to create a new object
  $augmented-paths: ();
  // make sure to add parent elements to removal list
  // since leaving them in place will reinstate the removed path
  @each $key in $key-list {
    @if isnt_null(str-index($key, '.')) {
      $augmented-paths: compose(
        (append, $augmented-paths),
        (implode, '.'),
        init,
        (explode, '.'),
        $key
      );
    }
  }
  $augmented-paths: join($key-list, $augmented-paths);
  // this is a bit of an optimization:
  // remove the nested paths of root elements
  // that have no nested paths marked for removal
  // since adding a root element and all its children
  // individually would be highly redundant.
  // relies on listPaths returning a root element
  // and its children all next to one another
  $last-path: 'a highly unlikely string to be used as a keyname';
  $final-pass-paths: ();
  @each $path in difference(listPaths($obj), $augmented-paths) {
    @if (is_null(str-index($path, $last-path))) {
      $final-pass-paths: fpAppend($path, $final-pass-paths);
      $last-path: $path;
    }
  }
  @return pick($final-pass-paths, $obj);
}
