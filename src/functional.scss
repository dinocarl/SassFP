// Functional Methods

@import 'util';
@import 'type';
@import 'list';

// returns the value provided
@function always($val) {
  @return $val;
}

// accepts a predicate and a list
// outputs a new list consisting of all the members of the initial list for which the predicate is true
@function filter($predicate, $list) {
  @return head(partition($predicate, $list));
}

// accepts a predicate and a list
// outputs a new list consisting of all the members of the initial list for which the predicate is false
@function reject($predicate, $list) {
  @return last(partition($predicate, $list));
}

// internal
// returns either the tail of argument
// or an empty list if it's not a list
@function _rest-or-list($maybe-list) {
  @return if(
    is_list($maybe-list),
    slice(2, length($maybe-list), $maybe-list),
    ()
  );
}

// accepts a function name and a list.
// outputs a new list where each member has had the function run against it
@function map($fnName, $list, $use-index: false) {
  $fn: head($fnName);
  $rest: _rest-or-list($fnName);
  $accumulated: ();
  @for $i from 1 through length($list) {
    $item: nth($list, $i);
    $item: if($use-index, ($item, $i), $item);
    $accumulated: append($accumulated, call(safe-call($fn), join($rest, $item)...));
  }
  @return $accumulated;
}

@function map-with-index($fnName, $list) {
  @return map($fnName, $list, true);
}


// accepts a function name, a list, and an initial value.
// outputs the accumulated result of running the function on each list member
@function reduce($fnName, $initial, $list) {
  $fn: nth($fnName, 1);
  $rest: _rest-or-list($fnName);
  $accumulated: $initial;
  @for $i from 1 through length($list) {
    $accumulated: call(safe-call($fn), join($rest, ($accumulated, nth($list, $i)))...);
  }
  @return $accumulated;
}

// internal
// accepts a single function name or
// list where the first member is a function name.
// outputs the result of function call
@function _item-fn-call($fnName, $input) {
  $fn: head($fnName);
  @if is_list($fnName) {
    $input: append(tail($fnName), $input);
  }
  @return call(safe-call($fn), $input...);
}

// accepts a list of function names and initial data.
// outputs the result of each of the functions being run
// on the successive results from first to last
@function pipe($params...) {
  $function-list: init($params);
  $result: last($params);
  @each $item in $function-list {
    $result: _item-fn-call($item, $result);
  }
  @return $result;
}

// same as pipe function, but runs in reverse order
@function compose($params...) {
  $function-list: init($params);
  $result: last($params);
  @for $i from length($function-list) * -1 through -1 {
    $item: nth($function-list, abs($i));
    $result: _item-fn-call($item, $result);
  }
  @return $result;
}
